/****************************************************************************
 * Ephemeris.js
 * (c) 2014, Brian Harris
 * Library for calculating sun and moon rise/set times and moon phases.
 * Formulas are from the USNO  http://aa.usno.navy.mil/faq/rs_algor.php.
*****************************************************************************/

// shortcuts for math functions
var PI = Math.PI,
    sin = Math.sin,
    cos = Math.cos,
    tan = Math.tan,
    asin = Math.asin,
    atan = Math.atan2,
    acos = Math.acos,
    sqrt = Math.sqrt,
    floor = Math.floor,
    round = Math.round,
    radians = PI / 180,
    K1 = 15 * radians * 1.0027379;

// Date and time constants
var dayMs = 1000 * 60 * 60 * 24,
    J1970 = 2440588,
    J2000 = 2451545;

/*
 * Returns the Julian day for the specified date.
 * param: date: Javascript UTC date.
 */
exports.toJulian = function(date) {
    return date / dayMs - 0.5 + J1970;
};

/*
 * Returns a JavaScript date object equal to the specified Julian day.
 */
exports.fromJulian = function(j) {
    return (j + 0.5 - J1970) * dayMs;
};

/*
 * Returns the number of Julian days since the beginning of the millennium/epoch 2000.
 */
exports.toDays = function(date) {
    return exports.toJulian(date) - J2000;
};

/*
 * Returns the specified Degrees value in Radians.
 */
exports.toRadians = function(deg) {
    return deg * (PI / 180);
};

/*
 * Returns the specified Radians in Degrees.
 */
exports.toDegrees = function (rad) {
    return rad * 180 / PI;
};

// Position functions
var e = radians * 23.4397; // Obliquity of the Earth

function getRightAscension(l, b) {
    return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));
}

function getDeclination(l, b) {
    return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));
}

function getAzimuth(H, phi, dec) {
    return PI + atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));
}

function getAltitude(H, phi, dec) {
    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));
}

function getSiderealTime(d, lw) {
    return radians * (280.16 + 360.9856235 * d) - lw;
}

// General Solar calculations, needed by both Sun and Moon objects
function getSolarMeanAnomaly(d) {
    return radians * (357.5291 + 0.98560028 * d);
}

function getEquationOfCenter(M) {
    return radians * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M));
}

function getEclipticLongitude(M, C) {
    var P = radians * 102.9372; // Perihelion of the Earth
    return M + C + P + PI;
}

function getSunCoordinates(d) {
    var M = getSolarMeanAnomaly(d),
        C = getEquationOfCenter(M),
        L = getEclipticLongitude(M, C);

    return {
        dec: getDeclination(L, 0),
        ra: getRightAscension(L, 0)
    };
}

// Calculations for Sun times
var times = [
    [-0.83, 'sunrise', 'sunset'],
    [-0.3, 'sunriseEnd', 'sunsetStart'],
    [-6, 'dawn', 'dusk'],
    [-12, 'nauticalDawn', 'nauticalDusk'],
    [-18, 'nightEnd', 'night']
];

var J0 = 0.0009;

function getJulianCycle(d, lw) {
    return Math.round(d - J0 - lw / (2 * PI));
}

function getApproxTransit(Ht, lw, n) {
    return J0 + (Ht + lw) / (2 * PI) + n;
}

function getSolarTransitJ(ds, M, L) {
    return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L) + 1;
}

function getHourAngle(h, phi, d) {
    return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d)));
}

function getSetTimeJ(h, lw, phi, dec, n, M, L) {
    var w = getHourAngle(h, phi, dec),
        a = getApproxTransit(w, lw, n);

    return getSolarTransitJ(a, M, L);
}

// Sun object
exports.Sun = {

    /*
     * Calculates the Sun position for a given date and latitude/longitude.
     */
    getPosition: function(date, lat, lng) {
        var lw = radians *  -lng,
            phi = radians * lat,
            d = exports.toDays(date),
            c = getSunCoordinates(d),
            H = getSiderealTime(d, lw) - c.ra;

        return {
            azimuth: getAzimuth(H, phi, c.dec),
            altitude: getAltitude(H, phi, c.dec)
        };
    },

    /*
     * Adds a custom time to the results of the getTimes function.
     */
    addTime: function(angle, riseName, setName) {
        times.push([angle, riseName, setName]);
    },

    /*
     * Calculates the Sun rise/set times for a given date and latitude/longitude.
     */
    getTimes: function(date, lat, lng) {
        //date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 12, 0, 0, 0, 0);

        var lw = radians * -lng,
            phi = radians * lat,
            d = exports.toDays(date),
            n = getJulianCycle(d, lw),
            ds = getApproxTransit(0, lw, n),
            M = getSolarMeanAnomaly(ds),
            C = getEquationOfCenter(M),
            L = getEclipticLongitude(M, C),
            dec = getDeclination(L, 0),
            Jnoon = getSolarTransitJ(ds, M, L);

        var result = {
            solarNoon: exports.fromJulian(Jnoon),
            nadir: exports.fromJulian(Jnoon - 0.5)
        };

        var i, len, time, Jset, Jrise;
        for (i = 0, len = times.length; i < len; i += 1) {
            time = times[i];

            Jset = getSetTimeJ(time[0] * radians, lw, phi, dec, n, M, L);
            Jrise = Jnoon - (Jset - Jnoon);

            result[time[1]] = exports.fromJulian(Jrise);
            result[time[2]] = exports.fromJulian(Jset);
        }

        return result;
    }
};

// Calculations for Moon
// Meeus first edition table 45.A Longitude and distance of the moon

var T45AD = new Array(0, 2, 2, 0, 0, 0, 2, 2, 2, 2,
    0, 1, 0, 2, 0, 0, 4, 0, 4, 2,
    2, 1, 1, 2, 2, 4, 2, 0, 2, 2,
    1, 2, 0, 0, 2, 2, 2, 4, 0, 3,
    2, 4, 0, 2, 2, 2, 4, 0, 4, 1,
    2, 0, 1, 3, 4, 2, 0, 1, 2, 2);

var T45AM = new Array(0,  0,  0,  0,  1,  0,  0, -1,  0, -1,
    1,  0,  1,  0,  0,  0,  0,  0,  0,  1,
    1,  0,  1, -1,  0,  0,  0,  1,  0, -1,
    0, -2,  1,  2, -2,  0,  0, -1,  0,  0,
    1, -1,  2,  2,  1, -1,  0,  0, -1,  0,
    1,  0,  1,  0,  0, -1,  2,  1,  0,  0);

var T45AMP = new Array( 1, -1,  0,  2,  0,  0, -2, -1,  1,  0,
    -1,  0,  1,  0,  1,  1, -1,  3, -2, -1,
    0, -1,  0,  1,  2,  0, -3, -2, -1, -2,
    1,  0,  2,  0, -1,  1,  0, -1,  2, -1,
    1, -2, -1, -1, -2,  0,  1,  4,  0, -2,
    0,  2,  1, -2, -3,  2,  1, -1,  3, -1);

var T45AF  = new Array( 0,  0,  0,  0,  0,  2,  0,  0,  0,  0,
    0,  0,  0, -2,  2, -2,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  2,  0,
    0,  0,  0,  0,  0, -2,  2,  0,  2,  0,
    0,  0,  0,  0,  0, -2,  0,  0,  0,  0,
    -2, -2,  0,  0,  0,  0,  0,  0,  0, -2);

var T45AL = new Array(6288774, 1274027, 658314, 213618, -185116,
    -114332,   58793,  57066,  53322,   45758,
    -40923,  -34720, -30383,  15327,  -12528,
    10980,   10675,  10034,   8548,   -7888,
    -6766,   -5163,   4987,   4036,    3994,
    3861,    3665,  -2689,  -2602,    2390,
    -2348,    2236,  -2120,  -2069,    2048,
    -1773,   -1595,   1215,  -1110,    -892,
    -810,     759,   -713,   -700,     691,
    596,     549,    537,    520,    -487,
    -399,    -381,    351,   -340,     330,
    327,    -323,    299,    294,       0);

var T45AR = new Array(-20905355, -3699111, -2955968, -569925,   48888,
    -3149,   246158,  -152138, -170733, -204586,
    -129620,   108743,   104755,   10321,       0,
    79661,   -34782,   -23210,  -21636,   24208,
    30824,    -8379,   -16675,  -12831,  -10445,
    -11650,    14403,    -7003,       0,   10056,
    6322,    -9884,     5751,       0,   -4950,
    4130,        0,    -3958,       0,    3258,
    2616,    -1897,    -2117,    2354,       0,
    0,    -1423,    -1117,   -1571,   -1739,
    0,    -4421,        0,       0,       0,
    0,     1165,        0,       0,    8752);

// Meeus table 45B latitude of the moon

var T45BD = new Array(0, 0, 0, 2, 2, 2, 2, 0, 2, 0,
    2, 2, 2, 2, 2, 2, 2, 0, 4, 0,
    0, 0, 1, 0, 0, 0, 1, 0, 4, 4,
    0, 4, 2, 2, 2, 2, 0, 2, 2, 2,
    2, 4, 2, 2, 0, 2, 1, 1, 0, 2,
    1, 2, 0, 4, 4, 1, 4, 1, 4, 2);

var T45BM = new Array( 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    -1,  0,  0,  1, -1, -1, -1, 1,  0,  1,
    0,  1,  0,  1,  1,  1,  0, 0,  0,  0,
    0,  0,  0,  0, -1,  0,  0, 0,  0,  1,
    1,  0, -1, -2,  0,  1,  1, 1,  1,  1,
    0, -1,  1,  0, -1,  0,  0, 0, -1, -2);

var T45BMP = new Array(0,  1, 1,  0, -1, -1,  0,  2,  1,  2,
    0, -2, 1,  0, -1,  0, -1, -1, -1,  0,
    0, -1, 0,  1,  1,  0,  0,  3,  0, -1,
    1, -2, 0,  2,  1, -2,  3,  2, -3, -1,
    0,  0, 1,  0,  1,  1,  0,  0, -2, -1,
    1, -2, 2, -2, -1,  1,  1, -1,  0,  0);

var T45BF = new Array( 1,  1, -1, -1,  1, -1,  1,  1, -1, -1,
    -1, -1,  1, -1,  1,  1, -1, -1, -1,  1,
    3,  1,  1,  1, -1, -1, -1,  1, -1,  1,
    -3,  1, -3, -1, -1,  1, -1,  1, -1,  1,
    1,  1,  1, -1,  3, -1, -1,  1, -1, -1,
    1, -1,  1, -1, -1, -1, -1, -1, -1,  1);

var T45BL = new Array(5128122, 280602, 277693, 173237, 55413,
    46271,  32573,  17198,   9266,  8822,
    8216,   4324,   4200,  -3359,  2463,
    2211,   2065,  -1870,   1828, -1794,
    -1749,  -1565,  -1491,  -1475, -1410,
    -1344,  -1335,   1107,   1021,   833,
    777,    671,    607,    596,   491,
    -451,    439,    422,    421,  -366,
    -351,    331,    315,    302,  -283,
    -229,    223,    223,   -220,  -220,
    -185,    181,   -177,    176,   166,
    -164,    132,   -119,    115,   107);

// Moon object
exports.Moon = {
    /*
     * MoonPos calculates the Moon position, based on Meeus chapter 45
     */
    getPosition: function(year, month, day, hours) {
        // julian date
        var jd=julian(year,month,day,hours);
        var T=(jd-2451545.0)/36525;
        var T2=T*T;
        var T3=T2*T;
        var T4=T3*T;
        // Moons mean longitude L'
        var LP=218.3164477+481267.88123421*T-0.0015786*T2+T3/538841.0-T4/65194000.0;
        // Moons mean elongation
        var D=297.8501921+445267.1114034*T-0.0018819*T2+T3/545868.0-T4/113065000.0;
        // Suns mean anomaly
        var M=357.5291092+35999.0502909*T-0.0001536*T2+T3/24490000.0;
        // Moons mean anomaly M'
        var MP=134.9633964+477198.8675055*T+0.0087414*T2+T3/69699.0-T4/14712000.0;
        // Moons argument of latitude
        var F=93.2720950+483202.0175233*T-0.0036539*T2-T3/3526000.0+T4/863310000.0;

        // Additional arguments
        var A1=119.75+131.849*T;
        var A2=53.09+479264.290*T;
        var A3=313.45+481266.484*T;
        var E=1-0.002516*T-0.0000074*T2;
        var E2=E*E;
        // Sums of periodic terms from table 45.A and 45.B
        var Sl=0.0;
        var Sr=0.0;
        for (var i=0; i<60; i++) {
            var Eterm=1;
            if (Math.abs(T45AM[i])==1) Eterm=E;
            if (Math.abs(T45AM[i])==2) Eterm=E2;
            Sl+=T45AL[i]*Eterm*sind(rev(T45AD[i]*D+T45AM[i]*M+T45AMP[i]*MP+T45AF[i]*F));
            Sr+=T45AR[i]*Eterm*cosd(rev(T45AD[i]*D+T45AM[i]*M+T45AMP[i]*MP+T45AF[i]*F));
        }
        var Sb=0.0;
        for (var i=0; i<60; i++) {
            var Eterm=1;
            if (Math.abs(T45BM[i])==1) Eterm=E;
            if (Math.abs(T45BM[i])==2) Eterm=E2;
            Sb+=T45BL[i]*Eterm*sind(rev(T45BD[i]*D+T45BM[i]*M+T45BMP[i]*MP+T45BF[i]*F));
        }
        // Additional additive terms
        Sl=Sl+3958*sind(rev(A1))+1962*sind(rev(LP-F))+318*sind(rev(A2));
        Sb=Sb-2235*sind(rev(LP))+382*sind(rev(A3))+175*sind(rev(A1-F))+
            175*sind(rev(A1+F))+127*sind(rev(LP-MP))-115*sind(rev(LP+MP));
        // geocentric longitude, latitude and distance
        var mglong=rev(LP+Sl/1000000.0);
        var mglat=rev(Sb/1000000.0);
        if (mglat > 180.0) mglat=mglat-360;
        var mr=Math.round(385000.56+Sr/1000.0);
        // Obliquity of Ecliptic
        var obl=23.4393-3.563E-9*(jd-2451543.5);
        // RA and dec
        var ra=rev(atan2d(sind(mglong)*cosd(obl)-tand(mglat)*sind(obl),
            cosd(mglong)))/15.0;
        var dec=rev(asind(sind(mglat)*cosd(obl)+cosd(mglat)*sind(obl)*sind(mglong)));
        if (dec > 180.0) dec=dec-360;
        return new Array(ra,dec,mr);
    },

    /*
     * The illuminated percentage from Meeus chapter 46
     */
    getMoonIllumination: function(year, month, day, hours) {
        var j=dayno(year,month,day,hours)+2451543.5;
        var T=(j-2451545.0)/36525;
        var T2=T*T;
        var T3=T2*T;
        var T4=T3*T;
        // Moons mean elongation Meeus first edition
        // var D=297.8502042+445267.1115168*T-0.0016300*T2+T3/545868.0-T4/113065000.0;
        // Moons mean elongation Meeus second edition
        var D=297.8501921+445267.1114034*T-0.0018819*T2+T3/545868.0-T4/113065000.0;
        // Moons mean anomaly M' Meeus first edition
        // var MP=134.9634114+477198.8676313*T+0.0089970*T2+T3/69699.0-T4/14712000.0;
        // Moons mean anomaly M' Meeus second edition
        var MP=134.9633964+477198.8675055*T+0.0087414*T2+T3/69699.0-T4/14712000.0;
        // Suns mean anomaly
        var M=357.5291092+35999.0502909*T-0.0001536*T2+T3/24490000.0;
        // phase angle
        var pa=180.0-D-6.289*sind(MP)+2.1*sind(M)-1.274*sind(2*D-MP)
            -0.658*sind(2*D)-0.214*sind(2*MP)-0.11*sind(D);
        return(rev(pa));
    },

    /*
     * Returns an array containing rise and set times or one of the
     * following codes.
     * -1 rise or set event not found and moon was down at 00:00
     * -2 rise or set event not found and moon was up   at 00:00
     * WARNING code changes on 6/7 May 2003 these are now local times
     * NOT UTC and rise/set not found codes changed.
     */
    getTimes: function(year, month, day, TZ, latitude, longitude) {
        var hours=0;
        var riseset=new Array();
        // elh is the elevation at the hour elhdone is true if elh calculated
        var elh=new Array();
        var elhdone=new Array();
        for (var i=0; i<=24; i++) {elhdone[i]=false;}
        // Compute the moon elevation at start and end of day
        // store elevation at the hours in an array elh to save search time
        var rad=MoonPos(year,month,day,hours-TZ);
        var altaz=radtoaa(rad[0],rad[1],year,month,day,hours-TZ,latitude,longitude);
        elh[0]=altaz[0]; elhdone[0]=true;
        // set the return code to allow for always up or never rises
        if (elh[0] > 0.0) {
            riseset=new Array(-2,-2);
        } else {
            riseset=new Array(-1,-1);
        }
        hours=24;
        rad=MoonPos(year,month,day,hours-TZ);
        altaz=radtoaa(rad[0],rad[1],year,month,day,hours-TZ,latitude,longitude);
        elh[24]=altaz[0]; elhdone[24]=true;
        // search for moonrise and set
        for (var rise=0; rise<2; rise++) {
            var found=false;
            var hfirst=0;
            var hlast=24;
            // Try a binary chop on the hours to speed the search
            while (Math.ceil((hlast-hfirst)/2) > 1) {
                hmid=hfirst+Math.round((hlast-hfirst)/2);
                if (!elhdone[hmid]) {
                    hours=hmid;
                    rad=MoonPos(year,month,day,hours-TZ);
                    altaz=radtoaa(rad[0],rad[1],year,month,day,hours-TZ,latitude,longitude);
                    elh[hmid]=altaz[0]; elhdone[hmid]=true;
                }
                if (((rise == 0) && (elh[hfirst] <= 0.0) && (elh[hmid] >= 0.0)) ||
                    ((rise == 1) && (elh[hfirst] >= 0.0) && (elh[hmid] <= 0.0))) {
                    hlast=hmid; found=true; continue;
                }
                if (((rise == 0) && (elh[hmid] <= 0.0) && (elh[hlast] >= 0.0)) ||
                    ((rise == 1) && (elh[hmid] >= 0.0) && (elh[hlast] <= 0.0))) {
                    hfirst=hmid; found=true; continue;
                }
                break;
            }
            // If the binary chop did not find a 1 hour interval
            if ((hlast-hfirst) > 1) {
                for (var i=hfirst; i<hlast; i++) {
                    found=false;
                    if (!elhdone[i+1]) {
                        hours=i+1;
                        rad=MoonPos(year,month,day,hours-TZ);
                        altaz=radtoaa(rad[0],rad[1],year,month,day,hours-TZ,latitude,longitude);
                        elh[hours]=altaz[0]; elhdone[hours]=true;
                    }
                    if (((rise == 0) && (elh[i] <= 0.0) && (elh[i+1] >= 0.0)) ||
                        ((rise == 1) && (elh[i] >= 0.0) && (elh[i+1] <= 0.0))) {
                        hfirst=i; hlast=i+1; found=true; break;
                    }
                }
            }
            // simple linear interpolation for the minutes
            if (found) {
                var elfirst=elh[hfirst]; var ellast=elh[hlast];
                hours=hfirst+0.5;
                rad=MoonPos(year,month,day,hours-TZ);
                altaz=radtoaa(rad[0],rad[1],year,month,day,hours-TZ,latitude,longitude);
                // alert("day ="+day+" hour ="+hours+" altaz="+altaz[0]+" "+altaz[1]);
                if ((rise == 0) && (altaz[0] <= 0.0)) {hfirst=hours; elfirst=altaz[0];}
                if ((rise == 0) && (altaz[0] > 0.0)) {hlast=hours; ellast=altaz[0];}
                if ((rise == 1) && (altaz[0] <= 0.0)) {hlast=hours; ellast=altaz[0];}
                if ((rise == 1) && (altaz[0] > 0.0)) {hfirst=hours; elfirst=altaz[0];}
                var eld=Math.abs(elfirst)+Math.abs(ellast);
                riseset[rise]=hfirst+(hlast-hfirst)*Math.abs(elfirst)/eld;
            }
        } // End of rise/set loop
        return(riseset);
    }
};